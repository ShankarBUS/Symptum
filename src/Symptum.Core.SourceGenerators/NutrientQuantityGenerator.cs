using System.Text;
using Microsoft.CodeAnalysis;

namespace Symptum.Core.SourceGenerators;

/// <summary>
/// A source generator for Symptum.Data.Nutrition.Food
/// </summary>
[Generator]
public class NutrientQuantityGenerator : ISourceGenerator
{
    private string GetFieldName(string s)
    {
        s = s.Trim();
        s = char.IsLetter(s[0]) ? char.ToLower(s[0]) + s.Substring(1) : s;
        s = new string(s.Where(ch => char.IsDigit(ch) || char.IsLetter(ch)).ToArray());
        s = char.IsDigit(s.Trim()[0]) ? "__" + s : s;
        return s;
    }

    private string GetPropertyName(string s)
    {
        s = s.Trim();
        s = char.IsLetter(s[0]) ? char.ToUpper(s[0]) + s.Substring(1) : s;
        s = new string(s.Where(ch => char.IsDigit(ch) || char.IsLetter(ch)).ToArray());
        s = char.IsDigit(s.Trim()[0]) ? "_" + s : s;
        return s;
    }

    public void Execute(GeneratorExecutionContext context)
    {
        string? nutrientIndexPath = context.AdditionalFiles
            .FirstOrDefault(x => Path.GetFileName(x.Path).Equals("NutrientIndex.txt", StringComparison.OrdinalIgnoreCase))?.Path;

        if (nutrientIndexPath == null) return;

        StringBuilder source = new(@"// <auto-generated/>

using CsvHelper.Configuration.Attributes;
using Symptum.Core.TypeConversion;

namespace Symptum.Core.Data.Nutrition
{
    public partial class Food
    {");
        foreach (var line in File.ReadAllLines(nutrientIndexPath))
        {
            string field = GetFieldName(line);
            string prop = GetPropertyName(line);
            source.Append($@"
        private Quantity? {field};

        [GenerateUI(Header = ""{line}"")]
        [TypeConverter(typeof(QuantityCsvConverter))]
        public Quantity? {prop}
        {{
             get => {field};
             set => SetProperty(ref {field}, value);
        }}
");
        }

        source.Append(@"    }
}
");
        context.AddSource("Food.g.cs", source.ToString());
    }

    private const string attributeText = @"// <auto-generated/>

using System;

namespace Symptum.Core.Data.Nutrition
{
    [AttributeUsage(AttributeTargets.Property, Inherited = false, AllowMultiple = false)]
    public sealed class GenerateUIAttribute : Attribute
    {
        public GenerateUIAttribute()
        { }

        public string Header { get; set; }
    }
}
";

    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization(i => i.AddSource("GenerateUIAttribute.g.cs", attributeText));
    }
}
